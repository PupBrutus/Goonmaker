Texture2D PrevTex;
Texture2D ActualTex;


#define PI 3.14159265358979


float2 ScreenSize:TARGETSIZE;

cbuffer controls:register(b0){

float2 poffset = float2(1., 1.);
float lambda = 0.;
	float2 scale = float2(1,1);
};

SamplerState s0 <bool visible=false;string uiname="Sampler";>
{
	Filter=MIN_MAG_MIP_LINEAR;
	AddressU=CLAMP;
	AddressV=CLAMP;
	MipLODBias = 0;
};


float4 PSOpticalFlowHS(float2 uv)
{

    float2 offset = poffset/ScreenSize;


    float4 a = PrevTex.Sample(s0,uv);
    float4 b = ActualTex.Sample(s0,uv);
    
    float2 texcoord0 = uv;
    
    float2 nx = float2(offset.x, 0.);
    float2 ny = float2(0., offset.y);

    float4 CurrentDifference = b-a;

	float4 GradientX = ((ActualTex.Sample(s0,uv + nx) - ActualTex.Sample(s0,uv - nx)) + (PrevTex.Sample(s0,uv + nx) - PrevTex.Sample(s0,uv - nx)))/2.;
    float4 GradientY = ((ActualTex.Sample(s0,uv + ny) - ActualTex.Sample(s0,uv - ny)) + (PrevTex.Sample(s0,uv + ny) - PrevTex.Sample(s0,uv - ny)))/2.;
    float4 GradientMagnitude = sqrt( (GradientX*GradientX)+(GradientY*GradientY)+float4(lambda, lambda, lambda, lambda));

    float4 VelocityX = CurrentDifference * (GradientX/GradientMagnitude);
    float4 VelocityY = CurrentDifference * (GradientY/GradientMagnitude);

    float vxd = VelocityX.r; // assumes greyscale
    //float2 xout = float2(max(vxd, 0.), abs(min(vxd, 0.)))*scale.x;
    
    float vyd = VelocityY.r; // assumes greyscale
    //float2 yout = float2(max(vyd, 0.), abs(min(vyd, 0.)))*scale.y;

    return float4(vxd * scale.x,vyd * scale.y,0,1);//xout,yout);//float4(xout, yout);
}

float4 PS(float4 PosWVP:SV_POSITION,float2 uv:TEXCOORD0):SV_Target
{

	//vmap+=c;
    return PSOpticalFlowHS(uv);//vmap;
}


technique10 Process{

	pass P0 <string format="R32G32B32A32_Float";>
	{SetPixelShader(CompileShader(ps_4_0,PS()));}

}
